class Bnode{
	int data;
	Bnode left_child;
	Bnode right_child;

public Bnode(int num){
	data = num;
	
}
}


public class BinaryTree {
	
	
	public static void main(String args[]){
		Bnode rootnode = new Bnode(25);
		insertNode(rootnode, 12);
		insertNode(rootnode,23);
		insertNode(rootnode,27);
		insertNode(rootnode,30);
		printTree(rootnode);
	}
	


public static void insertNode(Bnode rootnode,int num ){
	Bnode leaf = new Bnode(num);
	if(rootnode.data>leaf.data){
		if(rootnode.left_child == null){
			rootnode.left_child = leaf;
		}
		else{
			insertNode(rootnode.left_child,num);
		}
		
	}
	else if(rootnode.data<leaf.data){
		if(rootnode.right_child ==null){
			rootnode.right_child = leaf;
		}
		else{
			insertNode(rootnode.right_child,num);
		}
		
	}
	
	
}

public static void printTree(Bnode rootnode){
	if(rootnode!=null){
		printTree(rootnode.left_child);
		System.out.println(rootnode.data);
		printTree(rootnode.right_child);
	}
}

public static Bnode delNode(Bnode rootnode,int data){
	if(rootnode.data == data){
		Bnode temp = rootnode;
		if(temp.left_child==null){
			temp=temp.right_child;
			if(temp.left_child==null){
				rootnode=temp;
				return rootnode;
			}
			else{
				while(temp.left_child.left_child!=null){
					temp=temp.left_child;
				}
				temp.left_child.right_child =rootnode.right_child;
				rootnode=temp.left_child;
				temp.left_child = null;
				return rootnode;
			}
		}
		else{
			temp=temp.left_child;
			if(temp.right_child==null){
				temp.right_child = rootnode.right_child;
				rootnode=temp;
				return rootnode;
			}
			else{
				while(temp.right_child.right_child!=null){
					temp=temp.right_child;
				}
				temp.right_child.right_child =rootnode.right_child;
				rootnode=temp.right_child;
				temp.left_child = null;
				return rootnode;
			}
			
		}
		
		
	}
	else if(rootnode.data>data){
		
	}
	
}

}
