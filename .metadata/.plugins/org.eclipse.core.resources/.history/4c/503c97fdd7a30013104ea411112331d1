package Nomura;
import java.util.*;

public class HashTableImpl {
	private class HashNode{
		Object key;
		Object value;
		
		public HashNode(){
			this.key = null;
			this.value = null;
		}
		
		public HashNode(Object key, Object value){
			this.key = key;
			this.value = value;
		}
		
		public Object getKey() {
			return key;
		}
		public void setKey(Object key) {
			this.key = key;
		}
		public Object getValue() {
			return value;
		}
		public void setValue(Object value) {
			this.value = value;
		}
		
		public boolean equals(Object obj){
			if(obj instanceof HashNode){
				HashNode node = (HashNode)obj;
				return this.getKey().equals(node);
			}
			else{
				return false;
			}
		}
		
		public String toString(){
			return ("Key: "+ this.getKey() + "; Value: " + this.getValue());
		}
		
	}
	
	private final int table_size = 20;
	private int numElements;
	private Object[] table;
	
	private int hash(Object key){
		String str = key.toString();
		char [] char_arr = str.toCharArray();
		int result = 0;
		for(int i =0;i<str.length();i++){
			result = result + Integer.parseInt(str,i);
		}
		/*for(int i =0;i<str.length();i++){
			result = result + (int)char_arr[i];
		}*/
		return (result%this.table_size);
	}
	
	
	private void add(Object key,Object value){
		if(key == null || value == null){
			return ;
		}
		else{
			HashNode node = new HashNode(key,value);
			int hashvalue = hash(node.getKey());
			if(table[hashvalue]!=null){
				((LinkedList)this.table[hashvalue]).add(value);
			}
			else{
				LinkedList list = new LinkedList();
				list.add(value);
				this.table[hashvalue] = list;
			}
		}
		
		
	}
	
	public boolean contains(Object key){
		if(key == null){
			return false;
		}
		else{
			int hashval = this.hash(key);
			if(this.table[hashval]!=null){
				return true;
			}
			else{
				return false;
			}
		}
	}
	
	public Object get(Object key){
		
	}
	

}
