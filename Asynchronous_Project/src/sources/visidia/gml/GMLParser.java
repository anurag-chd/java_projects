/* Generated By:JavaCC: Do not edit this line. GMLParser.java */
package sources.visidia.gml;

import sources.visidia.graph.SimpleGraph;
public class GMLParser implements GMLParserConstants {
        public static void main(String[] args) throws ParseException {
                GMLParser parser = new GMLParser(System.in);
                parser.Input().print();
        }

  final public SimpleGraph Input() throws ParseException {
 SimpleGraph graph;
    graph = GML();
    jj_consume_token(0);
                {if (true) return graph;}
    throw new Error("Missing return statement in function");
  }

  final public SimpleGraph GML() throws ParseException {
 GMLList list;
    list = List();
                {if (true) return GMLGraphExtractor.extractGraph(list);}
    throw new Error("Missing return statement in function");
  }

  final public GMLList List() throws ParseException {
 GMLList list = new GMLList();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Pair(list);
    }
         {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public void Pair(GMLList list) throws ParseException {
 Token token; Object value;
    token = jj_consume_token(KEY);
    value = Value();
                list.add(token.image, value);
  }

  final public Object Value() throws ParseException {
 Object value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      value = IntegerValue();
                                 {if (true) return value;}
      break;
    case REAL:
      value = DoubleValue();
                                  {if (true) return value;}
      break;
    case STRING:
      value = StringValue();
                                  {if (true) return value;}
      break;
    case 18:
      jj_consume_token(18);
      value = List();
      jj_consume_token(19);
                                   {if (true) return value;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Integer IntegerValue() throws ParseException {
    jj_consume_token(INTEGER);
                //System.out.println("integer ="+token.image);
                Integer val = null;
                try{
                        val = new Integer(token.image);
                }
                catch(NumberFormatException e){
                        //throw new ParseException(" bad numerique format at line "+inputStream.getEndLine()+", column "+inputStream.getEndColumn()+" : "+token.image);
                }
                {if (true) return val;}
    throw new Error("Missing return statement in function");
  }

  final public Double DoubleValue() throws ParseException {
    jj_consume_token(REAL);
                //System.out.println("real ="+token.image);
                Double val = null;
                try{
                        val = new Double(token.image);
                }
                catch(NumberFormatException e){
                        //throw new ParseException(" bad numerique format at line "+inputStream.getEndLine()+", column "+inputStream.getEndColumn()+" : "+token.image);
                }
                {if (true) return val;}
    throw new Error("Missing return statement in function");
  }

  final public String StringValue() throws ParseException {
    jj_consume_token(STRING);
                //System.out.println("string ="+token.image);
                {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  public GMLParserTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  final private int[] jj_la1_0 = {0x10000,0x4a200,};

  public GMLParser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new GMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public GMLParser(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new GMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public GMLParser(GMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(GMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[20];
    for (int i = 0; i < 20; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
class ISO_8859_1{
        /**
	* return the character named by teh string <code> spec </code>.
	* if any character isn't named by <code> spec </code>, it return -1.
	*/
        static int specToChar(String name){
                 return '*';
        }

        /**
	* return the character name. If the characater does not have any name it return null.
	*/
        static String charToSpec(char c){
                return "no yet implemented";
        }
}
